#! /usr/bin/env bash
# vim: ft=sh

##############################################################################
# This is a, theorectically, simple way to include other scripts ( via source )
# in this one without having included files re-include the includes :)
#
# Any files in the directory where this script is running that match *.inc
# will be in the order returned from the expansion of *.inc, so alphabetical
# ordering.  Thus if you wish to control the order more explicitly you can
# name your includes 01_*.inc, 02_*.inc and so on.
##############################################################################
# begin include processing
MY_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
export INCLUDE_LIST=${INCLUDE_LIST}
for include in ${MY_DIR}/*.inc
do
  INCLUDE_KEY=INCLUDED_${include}
  # if we find that our include key is _not_ already in our include list
  # we'll perform the include
  # this is done by removing $INCLUDE_KEY from $INCLUDE_LIST and comparing
  # the resultant to INCLUDE_LIST, if equal, nothing has been removed and thus
  # $INCLUDE_KEY is not in $INCLUDE_LIST
  if [ "${INCLUDE_LIST//${INCLUDE_KEY}//}" == "${INCLUDE_LIST}" ]
  then
    [ -n "${DEBUG}" ] && echo "including file: ${include}" >&2
    source ${include}
    INCLUDE_LIST=${INCLUDE_LIST}:${INCLUDE_KEY}
  fi
done
# end include processing

NOTIFY_URL=${1?You must provide an URL to receive the message}
get_message_or_die
TASK=$(cat <<EOF
#! /usr/bin/env bash
set -e
curl --connect-timeout 1 -s -S "${NOTIFY_URL}" -H 'Content-Type: application/json' --data-binary '${BOTTLE_MESSAGE}'
SEND_RESULT=$?
if [ \${SEND_RESULT} -ne 0 ]; then
  if [ -n "${PUSH_ERROR_NOTIFY_URL}" ]; then
    if printf "${MESSAGE_SOURCE}" | grep -E 'bottle\/push\/error'; then
      # if the message we failed to push is the message indicating a failure to push, we 
      # MUST NOT SEND IT, lest we DoS ourselves
      :
    else
      curl --connect-timeout 1 -s -S "${PUSH_ERROR_NOTIFY_URL}" -H 'Content-Type: application/json' --data '{"source":"bottle/push/error","notifyUrl":"${NOTIFY_URL}"}'
    fi
  fi
fi
EOF
)
send_message_to_task_queue  "${TASK}"
