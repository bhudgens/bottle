#! /usr/bin/env bash
# vim:ft=sh

##############################################################################
# This is a, theorectically, simple way to include other scripts ( via source )
# in this one without having included files re-include the includes :)
#
# Any files in the directory where this script is running that match *.inc
# will be in the order returned from the expansion of *.inc, so alphabetical
# ordering.  Thus if you wish to control the order more explicitly you can
# name your includes 01_*.inc, 02_*.inc and so on.
##############################################################################
# begin include processing
MY_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
export INCLUDE_LIST=${INCLUDE_LIST}
for include in ${MY_DIR}/*.inc
do
  INCLUDE_KEY=INCLUDED_${include}
  # if we find that our include key is _not_ already in our include list
  # we'll perform the include
  # this is done by removing $INCLUDE_KEY from $INCLUDE_LIST and comparing
  # the resultant to INCLUDE_LIST, if equal, nothing has been removed and thus
  # $INCLUDE_KEY is not in $INCLUDE_LIST
  if [ "${INCLUDE_LIST//${INCLUDE_KEY}//}" == "${INCLUDE_LIST}" ]
  then
    [ -n "${DEBUG}" ] && echo "including file: ${include}" >&2
    source ${include}
    INCLUDE_LIST=${INCLUDE_LIST}:${INCLUDE_KEY}
  fi
done
# end include processing

WALK_PATH=${1?You need to provide a path to walk}

function findSubscriptionsOnPath(){
  # starting at the bottom of a given path, returns any subscribers within
  # the directories that comprise the path
  # e.g.
  # Running on a directory structure like this :
  # root
  #  |- file.exe
  #  |- file.log
  #  |- subdir
  #     |- file.exe
  #     |- file.log
  #     |- subdir
  #        |- file.log
  # would return the following paths
  #  root/file.exe
  #  root/subdir/file.exe
  #
  CHECK_DIR=${1?No path provided to walk}
  if [ ! -d ${CHECK_DIR} ]; then
    echo "The path provided doesn't exist, there are no subscribers" >&2
    exit 1
  fi
  while [ -n "${CHECK_DIR}" -a "${CHECK_DIR}" != "/" -a "${CHECK_DIR}" != "." -a "${CHECK_DIR}" != ".." ]; do
    find ${CHECK_DIR} -maxdepth 1 -depth -type f -name '*.json'
    CHECK_DIR=$(dirname ${CHECK_DIR})
  done
}

findSubscriptionsOnPath ${WALK_PATH}
